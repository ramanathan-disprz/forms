// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using forms.Data;

#nullable disable

namespace forms.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20251013085034_DBStructChange")]
    partial class DBStructChange
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("forms.Model.Admin", b =>
                {
                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at");

                    b.Property<int>("FormLimit")
                        .HasColumnType("int")
                        .HasColumnName("form_count");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_at");

                    b.HasKey("UserId");

                    b.ToTable("admins");
                });

            modelBuilder.Entity("forms.Model.FormSubmission.FormAnswer", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at");

                    b.Property<string>("QuestionId")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("question_id");

                    b.Property<string>("QuestionType")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("question_type");

                    b.Property<long>("SubmissionId")
                        .HasColumnType("bigint")
                        .HasColumnName("submission_id");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_at");

                    b.Property<string>("ValueJson")
                        .HasColumnType("json")
                        .HasColumnName("value_json");

                    b.Property<string>("ValueText")
                        .HasColumnType("longtext")
                        .HasColumnName("value_text");

                    b.HasKey("Id");

                    b.HasIndex("SubmissionId");

                    b.ToTable("form_answers");
                });

            modelBuilder.Entity("forms.Model.FormSubmission.FormSubmission", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at");

                    b.Property<string>("FormId")
                        .IsRequired()
                        .HasMaxLength(24)
                        .HasColumnType("varchar(24)")
                        .HasColumnName("form_id");

                    b.Property<DateTime>("SubmittedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("submitted_at");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_at");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("form_submissions");
                });

            modelBuilder.Entity("forms.Model.User", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(320)
                        .HasColumnType("varchar(320)")
                        .HasColumnName("email");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("name");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("varchar(512)")
                        .HasColumnName("password");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_at");

                    b.Property<string>("UserRole")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("user_role");

                    b.HasKey("Id");

                    b.ToTable("users");
                });

            modelBuilder.Entity("forms.Model.Admin", b =>
                {
                    b.HasOne("forms.Model.User", null)
                        .WithOne()
                        .HasForeignKey("forms.Model.Admin", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("forms.Model.FormSubmission.FormAnswer", b =>
                {
                    b.HasOne("forms.Model.FormSubmission.FormSubmission", null)
                        .WithMany()
                        .HasForeignKey("SubmissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("forms.Model.FormSubmission.FormSubmission", b =>
                {
                    b.HasOne("forms.Model.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
